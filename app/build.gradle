import java.text.SimpleDateFormat

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    alias libs.plugins.kotlin.kapt
    alias libs.plugins.kotlin.ksp
    alias libs.plugins.kotlin.parcelize
    alias libs.plugins.hilt
}

def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    namespace 'com.qtkun.chatgpt'
    compileSdk 33

    defaultConfig {
        applicationId "com.qtkun.chatgpt"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation":
                                      "$projectDir/schemas".toString()]
            }
        }
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }

    buildFeatures {
        viewBinding = true
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            if (outputFileName.endsWith('.apk')) {
                def date = new SimpleDateFormat("yyyy-MM-dd").format(new Date())
                if (variant.productFlavors[0]?.name == null) {
                    outputFileName = "ChatGPT_${defaultConfig.versionName}_${variant.buildType.name}_${date}.apk"
                } else {
                    outputFileName = "ChatGPT_${defaultConfig.versionName}_${variant.buildType.name}_${variant.productFlavors[0]?.name}_${date}.apk"
                }
            }
        }
    }
}

dependencies {

    implementation libs.core.ktx
    implementation libs.appcompat
    implementation libs.material
    implementation libs.hilt.android
    kapt libs.hilt.compiler
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation libs.constraintlayout
    implementation libs.bundles.lifecycle.ktx
    implementation libs.bundles.room
    ksp libs.room.compiler
    implementation libs.kotlinx.coroutines.core
    implementation libs.kotlin.reflect
    implementation libs.bundles.retrofit
    implementation libs.bundles.moshi
    ksp libs.moshi.kotlin.codegen
    implementation libs.logging.interceptor
    implementation libs.ultimateBarX
}

kapt {
    correctErrorTypes true
}

this.tasks.whenTaskAdded {
    task ->
        if (task.name.contains('UnitTest') || task.name.contains("AndroidTest")) {
            task.enabled = false
        }
}